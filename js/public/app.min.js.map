{"version":3,"sources":["app.js","controllers/appcontroller.js","controllers/notecontroller.js","controllers/notescontroller.js","directives/autofocus.js","directives/editor.js","directives/handwritten.js","directives/issaving.js","directives/timeoutchange.js","directives/tooltip.js","filters/noteTitle.js","filters/wordCount.js","services/is.js","services/notesmodel.js","services/savequeue.js"],"names":["angular","$","requestToken","mdEdit","undefined","app","module","config","$provide","$routeProvider","RestangularProvider","$httpProvider","$windowProvider","defaults","headers","common","requesttoken","value","saveInterval","when","templateUrl","controller","resolve","note","$route","$q","is","Restangular","deferred","defer","noteId","current","params","loading","one","get","then","reject","promise","otherwise","redirectTo","$window","$get","url","location","href","baseUrl","split","setBaseUrl","run","$rootScope","$location","NotesModel","attr","OC","filePath","$on","notes","getAll","length","sorted","sort","a","b","modified","path","id","$scope","init","lastViewedNote","writebyHand","$broadcast","$routeParams","SaveQueue","updateIfExists","console","log","isSaving","updateTitle","title","content","t","save","handwrittenContent","signature","add","route","notesResource","all","getList","addAll","create","post","remove","$emit","directive","restrict","link","scope","element","focus","$timeout","editor","change","$apply","setValue","on","event","ctrlKey","this","find","text","window","open","JSON","stringify","ui","e","notesIsSaving","onbeforeunload","attributes","timeout","interval","bind","cancel","notesTimeoutChange","tooltip","filter","trim","replace","wordCount","search","n","factory","notesIds","prototype","i","updated","isDefined","push","splice","_queue","_flushLock","_flush","keys","Object","self","requests","put","_noteUpdateRequest","response","jQuery","oc_requesttoken"],"mappings":"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","file":"app.min.js","sourcesContent":["/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n/* jshint unused: false */\nvar app = angular.module('Notes', ['restangular', 'ngRoute']).\nconfig(function($provide, $routeProvider, RestangularProvider, $httpProvider,\n                $windowProvider) {\n    'use strict';\n\n    // Always send the CSRF token by default\n    $httpProvider.defaults.headers.common.requesttoken = requestToken;\n\n    // you have to use $provide inside the config method to provide a globally\n    // shared and injectable object\n    $provide.value('Constants', {\n        saveInterval: 5*1000  // miliseconds\n    });\n\n    // define your routes that that load templates into the ng-view\n    $routeProvider.when('/notes/:noteId', {\n        templateUrl: 'note.html',\n        controller: 'NoteController',\n        resolve: {\n            // $routeParams does not work inside resolve so use $route\n            // note is the name of the argument that will be injected into the\n            // controller\n            /* @ngInject */\n            note: function ($route, $q, is, Restangular) {\n\n                var deferred = $q.defer();\n                var noteId = $route.current.params.noteId;\n                is.loading = true;\n\n                Restangular.one('notes', noteId).get().then(function (note) {\n                    is.loading = false;\n                    deferred.resolve(note);\n                }, function () {\n                    is.loading = false;\n                    deferred.reject();\n                });\n\n                return deferred.promise;\n            }\n        }\n    }).otherwise({\n        redirectTo: '/'\n    });\n\n    // dynamically set base URL for HTTP requests, assume that there is no other\n    // index.php in the routes\n    var $window = $windowProvider.$get();\n    var url = $window.location.href;\n    var baseUrl = url.split('index.php')[0] + 'index.php/apps/notes';\n    RestangularProvider.setBaseUrl(baseUrl);\n\n\n\n}).run(function ($rootScope, $location, NotesModel) {\n    'use strict';\n\n    $('link[rel=\"shortcut icon\"]').attr('href', OC.filePath('notes', 'img', 'favicon.png'));\n\n    // handle route errors\n    $rootScope.$on('$routeChangeError', function () {\n        var notes = NotesModel.getAll();\n\n        // route change error should redirect to the latest note if possible\n        if (notes.length > 0) {\n            var sorted = notes.sort(function (a, b) {\n                if(a.modified > b.modified) {\n                    return 1;\n                } else if(a.modified < b.modified) {\n                    return -1;\n                } else {\n                    return 0;\n                }\n            });\n\n            var note = notes[sorted.length-1];\n            $location.path('/notes/' + note.id);\n        } else {\n            $location.path('/');\n        }\n    });\n});\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n app.controller('AppController', function ($scope, $location, is) {\n \t'use strict';\n\n \t$scope.is = is;\n\n \t$scope.init = function (lastViewedNote) {\n \t\tif(lastViewedNote !== 0) {\n \t\t\t$location.path('/notes/' + lastViewedNote);\n \t\t}\n \t};\n \t$scope.writebyHand = function() {\n \t\t//alert('useHandWriting');\n\n \t\t$scope.$broadcast('useHandWriting');\n};\n });\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.controller('NoteController', function($routeParams, $scope, NotesModel,\n                                          SaveQueue, note) {\n    'use strict';\n\n    NotesModel.updateIfExists(note);\n\n    $scope.note = NotesModel.get($routeParams.noteId);\n    console.log($scope.note);\n    $scope.isSaving = function () {\n        return SaveQueue.isSaving();\n    };\n    $scope.updateTitle = function () {\n        $scope.note.title = $scope.note.content.split('\\n')[0] ||\n            t('notes', 'New note');\n    };\n\n    $scope.save = function() {\n        $scope.note.handwrittenContent = $('.kbw-signature').signature('toJSON');\n\n        var note = $scope.note;\n        SaveQueue.add(note);\n    };\n\n});","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n// This is available by using ng-controller=\"NotesController\" in your HTML\napp.controller('NotesController', function($routeParams, $scope, $location,\n                                           Restangular, NotesModel) {\n    'use strict';\n\n    $scope.route = $routeParams;\n    $scope.notes = NotesModel.getAll();\n\n    var notesResource = Restangular.all('notes');\n\n    // initial request for getting all notes\n    notesResource.getList().then(function (notes) {\n        NotesModel.addAll(notes);\n    });\n\n    $scope.create = function () {\n        notesResource.post().then(function (note) {\n            NotesModel.add(note);\n            $location.path('/notes/' + note.id);\n        });\n    };\n\n    $scope.delete = function (noteId) {\n        var note = NotesModel.get(noteId);\n        note.remove().then(function () {\n            NotesModel.remove(noteId);\n            $scope.$emit('$routeChangeError');\n        });\n    };\n\n\n});\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.directive('notesAutofocus', function () {\n    'use strict';\n    return {\n        restrict: 'A',\n        link: function (scope, element) {\n            element.focus();\n        }\n    };\n});\n","/*global mdEdit*/\napp.directive('editor', ['$timeout', function ($timeout) {\n\t'use strict';\n\treturn {\n\t\trestrict: 'A',\n\t\tlink: function(scope, element) {\n\t\t\tvar editor = mdEdit(element[0], {change: function(value) {\n\n\t\t\t\t$timeout(function(){\n\t\t\t\t\tscope.$apply(function() {\n\t\t\t\t\t\tscope.note.content = value;\n\t\t\t\t\t\tscope.updateTitle();\n\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}});\n\t\t\teditor.setValue(scope.note.content);\n\t\t\telement.on('click', '.link', function(event) {\n\t\t\t\tif(event.ctrlKey) {\n\t\t\t\t\tvar url = $(this).find('.link-params-inner').text();\n\t\t\t\t\twindow.open(url, '_blank');\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t};\n}]);\n","app.directive('handwritten', [function () {\r\n\t'use strict';\r\n\treturn {\r\n\t\trestrict: 'A',\r\n\t\tlink: function(scope, element) {\r\n\t\t\t\r\n\t\t\tconsole.log(JSON.stringify(element));\r\n\t\t\t$(element).signature({change: function(event, ui) { \r\n\t\t\t\tscope.save();\r\n\t\t\t}});\r\n\t\t\t$(element).signature('disable');\r\n\t\t\tif(scope.note.handwrittenContent != \"\"){\r\n\t\t\t$(element).signature('draw', scope.note.handwrittenContent);\r\n}\r\n\t\t\tscope.$on('useHandWriting', function(e) { \r\n\t\t\t\t$(element).signature('enable');\r\n\t\t\t});\r\n\r\n\t\t}\r\n\t};\r\n}]);\r\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.directive('notesIsSaving', function ($window) {\n    'use strict';\n    return {\n        restrict: 'A',\n        scope: {\n            'notesIsSaving': '='\n        },\n        link: function (scope) {\n            $window.onbeforeunload = function () {\n                if (scope.notesIsSaving) {\n                    return t('notes', 'Note is currently saving. Leaving ' +\n                                      'the page will delete all changes!');\n                } else {\n                    return null;\n                }\n            };\n        }\n    };\n});\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n/**\n * Like ng-change only that it does not fire when you type faster than\n * 300 ms\n */\napp.directive('notesTimeoutChange', function ($timeout) {\n    'use strict';\n\n    return {\n        restrict: 'A',\n        link: function (scope, element, attributes) {\n            var interval = 300;  // 300 miliseconds timeout after typing\n            var timeout;\n\n            $(element).bind('input propertychange paste', function () {\n                $timeout.cancel(timeout);\n\n                timeout = $timeout(function () {\n                    scope.$apply(attributes.notesTimeoutChange);\n                }, interval);\n            });\n        }\n    };\n});\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.directive('notesTooltip', function () {\n    'use strict';\n\n    return {\n        restrict: 'A',\n        link: function (scope, element) {\n            element.tooltip();\n        }\n    };\n});\n","/**\n * removes whitespaces and leading #\n */\napp.filter('noteTitle', function () {\n\t'use strict';\n\treturn function (value) {\n        \tvalue = value.split('\\n')[0] || 'newNote';\n\t\treturn value.trim().replace(/^#+/g, '');\n\t};\n});\n","app.filter('wordCount', function () {\n\t'use strict';\n\treturn function (value) {\n\t\tif (value && (typeof value === 'string')) {\n\t\t\tvar wordCount = value.split(/\\s+/).filter(\n\t\t\t\t// only count words containing\n\t\t\t\t// at least one alphanumeric character\n\t\t\t\tfunction(value) {\n\t\t\t\t\treturn value.search(/[A-Za-z0-9]/) !== -1;\n\t\t\t\t}\n\t\t\t).length;\n\t\t\treturn window.n('notes', '%n word', '%n words', wordCount);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t};\n});\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.factory('is', function () {\n    'use strict';\n\n    return {\n        loading: false\n    };\n});","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n// take care of fileconflicts by appending a number\napp.factory('NotesModel', function () {\n    'use strict';\n\n    var NotesModel = function () {\n        this.notes = [];\n        this.notesIds = {};\n    };\n\n    NotesModel.prototype = {\n        addAll: function (notes) {\n            for(var i=0; i<notes.length; i+=1) {\n                this.add(notes[i]);\n            }\n        },\n        add: function(note) {\n            this.updateIfExists(note);\n        },\n        getAll: function () {\n            return this.notes;\n        },\n        get: function (id) {\n            return this.notesIds[id];\n        },\n        updateIfExists: function(updated) {\n            var note = this.notesIds[updated.id];\n            if(angular.isDefined(note)) {\n                note.title = updated.title;\n                note.modified = updated.modified;\n                note.content = updated.content;\n                note.handwrittenContent = updated.handwrittenContent;\n            } else {\n                this.notes.push(updated);\n                this.notesIds[updated.id] = updated;\n            }\n        },\n        remove: function (id) {\n            for(var i=0; i<this.notes.length; i+=1) {\n                var note = this.notes[i];\n                if(note.id === id) {\n                    this.notes.splice(i, 1);\n                    delete this.notesIds[id];\n                    break;\n                }\n            }\n        }\n    };\n\n    return new NotesModel();\n});","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.factory('SaveQueue', function($q) {\n    'use strict';\n\n    var SaveQueue = function () {\n        this._queue = {};\n        this._flushLock = false;\n    };\n\n    SaveQueue.prototype = {\n        add: function (note) {\n            this._queue[note.id] = note;\n            this._flush();\n        },\n        _flush: function () {\n            // if there are no changes dont execute the requests\n            var keys = Object.keys(this._queue);\n            if(keys.length === 0 || this._flushLock) {\n                return;\n            } else {\n                this._flushLock = true;\n            }\n\n            var self = this;\n            var requests = [];\n\n            // iterate over updated objects and run an update request for\n            // each one of them\n            for(var i=0; i<keys.length; i+=1) {\n                var note = this._queue[keys[i]];\n                // if the update finished, update the modified and title\n                // attributes on the note\n                requests.push(note.put().then(\n                    this._noteUpdateRequest.bind(null, note))\n                );\n            }\n            this._queue = {};\n\n            // if all update requests are completed, run the flush\n            // again to update the next batch of queued notes\n            $q.all(requests).then(function () {\n                self._flushLock = false;\n                self._flush();\n            });\n        },\n        _noteUpdateRequest: function (note, response) {\n            note.title = response.title;\n            note.modified = response.modified;\n        },\n        isSaving: function () {\n            return this._flushLock;\n        }\n    };\n\n    return new SaveQueue();\n});"],"sourceRoot":"/source/"}